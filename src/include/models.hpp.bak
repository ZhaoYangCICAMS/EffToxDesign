
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_EffTox_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_EffTox");
    reader.add_event(110, 110, "end", "model_EffTox");
    return reader;
}

template <typename T0__, typename T1__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
typename boost::math::tools::promote_args<T0__, T1__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__>::type>::type
log_joint_pdf(const std::vector<T0__>& doses,
                  const std::vector<T1__>& doses_sq,
                  const int& n,
                  const std::vector<int>& yE,
                  const std::vector<int>& yT,
                  const std::vector<int>& levels,
                  const T6__& muE,
                  const T7__& betaE1,
                  const T8__& betaE2,
                  const T9__& muT,
                  const T10__& betaT1,
                  const T11__& psi, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 10;
        fun_scalar_t__ p;
        (void) p;  // dummy to suppress unused var warning

        stan::math::initialize(p, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(p,DUMMY_VAR__);


        current_statement_begin__ = 11;
        stan::math::assign(p, 0);
        current_statement_begin__ = 12;
        for (int j = 1; j <= n; ++j) {
            {
            current_statement_begin__ = 13;
            fun_scalar_t__ prob_eff;
            (void) prob_eff;  // dummy to suppress unused var warning

            stan::math::initialize(prob_eff, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(prob_eff,DUMMY_VAR__);
            current_statement_begin__ = 14;
            fun_scalar_t__ prob_tox;
            (void) prob_tox;  // dummy to suppress unused var warning

            stan::math::initialize(prob_tox, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(prob_tox,DUMMY_VAR__);
            current_statement_begin__ = 15;
            fun_scalar_t__ p_j;
            (void) p_j;  // dummy to suppress unused var warning

            stan::math::initialize(p_j, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(p_j,DUMMY_VAR__);


            current_statement_begin__ = 16;
            stan::math::assign(prob_eff, inv_logit(((muE + (betaE1 * get_base1(doses,get_base1(levels,j,"levels",1),"doses",1))) + (betaE2 * get_base1(doses_sq,get_base1(levels,j,"levels",1),"doses_sq",1)))));
            current_statement_begin__ = 18;
            stan::math::assign(prob_tox, inv_logit((muT + (betaT1 * get_base1(doses,get_base1(levels,j,"levels",1),"doses",1)))));
            current_statement_begin__ = 19;
            stan::math::assign(p_j, ((((pow(prob_eff,get_base1(yE,j,"yE",1)) * pow((1 - prob_eff),(1 - get_base1(yE,j,"yE",1)))) * pow(prob_tox,get_base1(yT,j,"yT",1))) * pow((1 - prob_tox),(1 - get_base1(yT,j,"yT",1)))) + ((((((pow(-(1),(get_base1(yE,j,"yE",1) + get_base1(yT,j,"yT",1))) * prob_eff) * prob_tox) * (1 - prob_eff)) * (1 - prob_tox)) * (exp(psi) - 1)) / (exp(psi) + 1))));
            current_statement_begin__ = 23;
            stan::math::assign(p, (p + log(p_j)));
            }
        }
        current_statement_begin__ = 25;
        return stan::math::promote_scalar<fun_return_scalar_t__>(p);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_joint_pdf_functor__ {
    template <typename T0__, typename T1__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__>
        typename boost::math::tools::promote_args<T0__, T1__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__>::type>::type
    operator()(const std::vector<T0__>& doses,
                  const std::vector<T1__>& doses_sq,
                  const int& n,
                  const std::vector<int>& yE,
                  const std::vector<int>& yT,
                  const std::vector<int>& levels,
                  const T6__& muE,
                  const T7__& betaE1,
                  const T8__& betaE2,
                  const T9__& muT,
                  const T10__& betaT1,
                  const T11__& psi, std::ostream* pstream__) const {
        return log_joint_pdf(doses, doses_sq, n, yE, yT, levels, muE, betaE1, betaE2, muT, betaT1, psi, pstream__);
    }
};

class model_EffTox : public prob_grad {
private:
    double muE_mean;
    double muE_sd;
    double betaE1_mean;
    double betaE1_sd;
    double betaE2_mean;
    double betaE2_sd;
    double muT_mean;
    double muT_sd;
    double betaT1_mean;
    double betaT1_sd;
    double psi_mean;
    double psi_sd;
    int K;
    vector<double> doses;
    double p;
    double pi1E;
    double pi2T;
    double piE;
    double piT;
    int n;
    vector<int> yE;
    vector<int> yT;
    vector<int> levels;
    vector<double> doses_sq;
public:
    model_EffTox(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_EffTox(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_EffTox_namespace::model_EffTox";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "muE_mean", "double", context__.to_vec());
            muE_mean = double(0);
            vals_r__ = context__.vals_r("muE_mean");
            pos__ = 0;
            muE_mean = vals_r__[pos__++];
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "muE_sd", "double", context__.to_vec());
            muE_sd = double(0);
            vals_r__ = context__.vals_r("muE_sd");
            pos__ = 0;
            muE_sd = vals_r__[pos__++];
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "betaE1_mean", "double", context__.to_vec());
            betaE1_mean = double(0);
            vals_r__ = context__.vals_r("betaE1_mean");
            pos__ = 0;
            betaE1_mean = vals_r__[pos__++];
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "betaE1_sd", "double", context__.to_vec());
            betaE1_sd = double(0);
            vals_r__ = context__.vals_r("betaE1_sd");
            pos__ = 0;
            betaE1_sd = vals_r__[pos__++];
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "betaE2_mean", "double", context__.to_vec());
            betaE2_mean = double(0);
            vals_r__ = context__.vals_r("betaE2_mean");
            pos__ = 0;
            betaE2_mean = vals_r__[pos__++];
            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "betaE2_sd", "double", context__.to_vec());
            betaE2_sd = double(0);
            vals_r__ = context__.vals_r("betaE2_sd");
            pos__ = 0;
            betaE2_sd = vals_r__[pos__++];
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "muT_mean", "double", context__.to_vec());
            muT_mean = double(0);
            vals_r__ = context__.vals_r("muT_mean");
            pos__ = 0;
            muT_mean = vals_r__[pos__++];
            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "muT_sd", "double", context__.to_vec());
            muT_sd = double(0);
            vals_r__ = context__.vals_r("muT_sd");
            pos__ = 0;
            muT_sd = vals_r__[pos__++];
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "betaT1_mean", "double", context__.to_vec());
            betaT1_mean = double(0);
            vals_r__ = context__.vals_r("betaT1_mean");
            pos__ = 0;
            betaT1_mean = vals_r__[pos__++];
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "betaT1_sd", "double", context__.to_vec());
            betaT1_sd = double(0);
            vals_r__ = context__.vals_r("betaT1_sd");
            pos__ = 0;
            betaT1_sd = vals_r__[pos__++];
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "psi_mean", "double", context__.to_vec());
            psi_mean = double(0);
            vals_r__ = context__.vals_r("psi_mean");
            pos__ = 0;
            psi_mean = vals_r__[pos__++];
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "psi_sd", "double", context__.to_vec());
            psi_sd = double(0);
            vals_r__ = context__.vals_r("psi_sd");
            pos__ = 0;
            psi_sd = vals_r__[pos__++];
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 45;
            validate_non_negative_index("doses", "K", K);
            context__.validate_dims("data initialization", "doses", "double", context__.to_vec(K));
            validate_non_negative_index("doses", "K", K);
            doses = std::vector<double>(K,double(0));
            vals_r__ = context__.vals_r("doses");
            pos__ = 0;
            size_t doses_limit_0__ = K;
            for (size_t i_0__ = 0; i_0__ < doses_limit_0__; ++i_0__) {
                doses[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 47;
            context__.validate_dims("data initialization", "p", "double", context__.to_vec());
            p = double(0);
            vals_r__ = context__.vals_r("p");
            pos__ = 0;
            p = vals_r__[pos__++];
            current_statement_begin__ = 49;
            context__.validate_dims("data initialization", "pi1E", "double", context__.to_vec());
            pi1E = double(0);
            vals_r__ = context__.vals_r("pi1E");
            pos__ = 0;
            pi1E = vals_r__[pos__++];
            current_statement_begin__ = 51;
            context__.validate_dims("data initialization", "pi2T", "double", context__.to_vec());
            pi2T = double(0);
            vals_r__ = context__.vals_r("pi2T");
            pos__ = 0;
            pi2T = vals_r__[pos__++];
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "piE", "double", context__.to_vec());
            piE = double(0);
            vals_r__ = context__.vals_r("piE");
            pos__ = 0;
            piE = vals_r__[pos__++];
            current_statement_begin__ = 55;
            context__.validate_dims("data initialization", "piT", "double", context__.to_vec());
            piT = double(0);
            vals_r__ = context__.vals_r("piT");
            pos__ = 0;
            piT = vals_r__[pos__++];
            current_statement_begin__ = 57;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            current_statement_begin__ = 58;
            validate_non_negative_index("yE", "n", n);
            context__.validate_dims("data initialization", "yE", "int", context__.to_vec(n));
            validate_non_negative_index("yE", "n", n);
            yE = std::vector<int>(n,int(0));
            vals_i__ = context__.vals_i("yE");
            pos__ = 0;
            size_t yE_limit_0__ = n;
            for (size_t i_0__ = 0; i_0__ < yE_limit_0__; ++i_0__) {
                yE[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 59;
            validate_non_negative_index("yT", "n", n);
            context__.validate_dims("data initialization", "yT", "int", context__.to_vec(n));
            validate_non_negative_index("yT", "n", n);
            yT = std::vector<int>(n,int(0));
            vals_i__ = context__.vals_i("yT");
            pos__ = 0;
            size_t yT_limit_0__ = n;
            for (size_t i_0__ = 0; i_0__ < yT_limit_0__; ++i_0__) {
                yT[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 60;
            validate_non_negative_index("levels", "n", n);
            context__.validate_dims("data initialization", "levels", "int", context__.to_vec(n));
            validate_non_negative_index("levels", "n", n);
            levels = std::vector<int>(n,int(0));
            vals_i__ = context__.vals_i("levels");
            pos__ = 0;
            size_t levels_limit_0__ = n;
            for (size_t i_0__ = 0; i_0__ < levels_limit_0__; ++i_0__) {
                levels[i_0__] = vals_i__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 31;
            current_statement_begin__ = 32;
            check_greater_or_equal(function__,"muE_sd",muE_sd,0);
            current_statement_begin__ = 33;
            current_statement_begin__ = 34;
            check_greater_or_equal(function__,"betaE1_sd",betaE1_sd,0);
            current_statement_begin__ = 35;
            current_statement_begin__ = 36;
            check_greater_or_equal(function__,"betaE2_sd",betaE2_sd,0);
            current_statement_begin__ = 37;
            current_statement_begin__ = 38;
            check_greater_or_equal(function__,"muT_sd",muT_sd,0);
            current_statement_begin__ = 39;
            current_statement_begin__ = 40;
            check_greater_or_equal(function__,"betaT1_sd",betaT1_sd,0);
            current_statement_begin__ = 41;
            current_statement_begin__ = 42;
            check_greater_or_equal(function__,"psi_sd",psi_sd,0);
            current_statement_begin__ = 44;
            check_greater_or_equal(function__,"K",K,1);
            current_statement_begin__ = 45;
            current_statement_begin__ = 47;
            current_statement_begin__ = 49;
            current_statement_begin__ = 51;
            current_statement_begin__ = 53;
            current_statement_begin__ = 55;
            current_statement_begin__ = 57;
            check_greater_or_equal(function__,"n",n,0);
            current_statement_begin__ = 58;
            for (int k0__ = 0; k0__ < n; ++k0__) {
                check_greater_or_equal(function__,"yE[k0__]",yE[k0__],0);
                check_less_or_equal(function__,"yE[k0__]",yE[k0__],1);
            }
            current_statement_begin__ = 59;
            for (int k0__ = 0; k0__ < n; ++k0__) {
                check_greater_or_equal(function__,"yT[k0__]",yT[k0__],0);
                check_less_or_equal(function__,"yT[k0__]",yT[k0__],1);
            }
            current_statement_begin__ = 60;
            for (int k0__ = 0; k0__ < n; ++k0__) {
                check_greater_or_equal(function__,"levels[k0__]",levels[k0__],1);
                check_less_or_equal(function__,"levels[k0__]",levels[k0__],K);
            }
            // initialize data variables
            current_statement_begin__ = 64;
            validate_non_negative_index("doses_sq", "K", K);
            doses_sq = std::vector<double>(K,double(0));
            stan::math::fill(doses_sq,DUMMY_VAR__);

            current_statement_begin__ = 65;
            stan::math::assign(doses_sq, square(doses));

            // validate transformed data
            current_statement_begin__ = 64;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 70;
            ++num_params_r__;
            current_statement_begin__ = 71;
            ++num_params_r__;
            current_statement_begin__ = 72;
            ++num_params_r__;
            current_statement_begin__ = 74;
            ++num_params_r__;
            current_statement_begin__ = 75;
            ++num_params_r__;
            current_statement_begin__ = 77;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_EffTox() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("muE")))
            throw std::runtime_error("variable muE missing");
        vals_r__ = context__.vals_r("muE");
        pos__ = 0U;
        context__.validate_dims("initialization", "muE", "double", context__.to_vec());
        double muE(0);
        muE = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(muE);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable muE: ") + e.what());
        }

        if (!(context__.contains_r("betaE1")))
            throw std::runtime_error("variable betaE1 missing");
        vals_r__ = context__.vals_r("betaE1");
        pos__ = 0U;
        context__.validate_dims("initialization", "betaE1", "double", context__.to_vec());
        double betaE1(0);
        betaE1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(betaE1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable betaE1: ") + e.what());
        }

        if (!(context__.contains_r("betaE2")))
            throw std::runtime_error("variable betaE2 missing");
        vals_r__ = context__.vals_r("betaE2");
        pos__ = 0U;
        context__.validate_dims("initialization", "betaE2", "double", context__.to_vec());
        double betaE2(0);
        betaE2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(betaE2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable betaE2: ") + e.what());
        }

        if (!(context__.contains_r("muT")))
            throw std::runtime_error("variable muT missing");
        vals_r__ = context__.vals_r("muT");
        pos__ = 0U;
        context__.validate_dims("initialization", "muT", "double", context__.to_vec());
        double muT(0);
        muT = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(muT);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable muT: ") + e.what());
        }

        if (!(context__.contains_r("betaT1")))
            throw std::runtime_error("variable betaT1 missing");
        vals_r__ = context__.vals_r("betaT1");
        pos__ = 0U;
        context__.validate_dims("initialization", "betaT1", "double", context__.to_vec());
        double betaT1(0);
        betaT1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,betaT1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable betaT1: ") + e.what());
        }

        if (!(context__.contains_r("psi")))
            throw std::runtime_error("variable psi missing");
        vals_r__ = context__.vals_r("psi");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi", "double", context__.to_vec());
        double psi(0);
        psi = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            T__ muE;
            (void) muE;  // dummy to suppress unused var warning
            if (jacobian__)
                muE = in__.scalar_constrain(lp__);
            else
                muE = in__.scalar_constrain();

            T__ betaE1;
            (void) betaE1;  // dummy to suppress unused var warning
            if (jacobian__)
                betaE1 = in__.scalar_constrain(lp__);
            else
                betaE1 = in__.scalar_constrain();

            T__ betaE2;
            (void) betaE2;  // dummy to suppress unused var warning
            if (jacobian__)
                betaE2 = in__.scalar_constrain(lp__);
            else
                betaE2 = in__.scalar_constrain();

            T__ muT;
            (void) muT;  // dummy to suppress unused var warning
            if (jacobian__)
                muT = in__.scalar_constrain(lp__);
            else
                muT = in__.scalar_constrain();

            T__ betaT1;
            (void) betaT1;  // dummy to suppress unused var warning
            if (jacobian__)
                betaT1 = in__.scalar_lb_constrain(0,lp__);
            else
                betaT1 = in__.scalar_lb_constrain(0);

            T__ psi;
            (void) psi;  // dummy to suppress unused var warning
            if (jacobian__)
                psi = in__.scalar_constrain(lp__);
            else
                psi = in__.scalar_constrain();


            // transformed parameters
            current_statement_begin__ = 82;
            validate_non_negative_index("prob_eff", "K", K);
            vector<T__> prob_eff(K);
            stan::math::initialize(prob_eff, DUMMY_VAR__);
            stan::math::fill(prob_eff,DUMMY_VAR__);
            current_statement_begin__ = 84;
            validate_non_negative_index("prob_tox", "K", K);
            vector<T__> prob_tox(K);
            stan::math::initialize(prob_tox, DUMMY_VAR__);
            stan::math::fill(prob_tox,DUMMY_VAR__);
            current_statement_begin__ = 86;
            validate_non_negative_index("prob_acc_eff", "K", K);
            vector<T__> prob_acc_eff(K);
            stan::math::initialize(prob_acc_eff, DUMMY_VAR__);
            stan::math::fill(prob_acc_eff,DUMMY_VAR__);
            current_statement_begin__ = 88;
            validate_non_negative_index("prob_acc_tox", "K", K);
            vector<T__> prob_acc_tox(K);
            stan::math::initialize(prob_acc_tox, DUMMY_VAR__);
            stan::math::fill(prob_acc_tox,DUMMY_VAR__);
            current_statement_begin__ = 89;
            validate_non_negative_index("utility", "K", K);
            vector<T__> utility(K);
            stan::math::initialize(utility, DUMMY_VAR__);
            stan::math::fill(utility,DUMMY_VAR__);


            current_statement_begin__ = 90;
            for (int i = 1; i <= K; ++i) {
                {
                current_statement_begin__ = 91;
                T__ r_to_the_p;
                (void) r_to_the_p;  // dummy to suppress unused var warning

                stan::math::initialize(r_to_the_p, DUMMY_VAR__);
                stan::math::fill(r_to_the_p,DUMMY_VAR__);


                current_statement_begin__ = 92;
                stan::math::assign(get_base1_lhs(prob_eff,i,"prob_eff",1), inv_logit(((muE + (betaE1 * get_base1(doses,i,"doses",1))) + (betaE2 * get_base1(doses_sq,i,"doses_sq",1)))));
                current_statement_begin__ = 93;
                stan::math::assign(get_base1_lhs(prob_tox,i,"prob_tox",1), inv_logit((muT + (betaT1 * get_base1(doses,i,"doses",1)))));
                current_statement_begin__ = 94;
                stan::math::assign(get_base1_lhs(prob_acc_eff,i,"prob_acc_eff",1), int_step((get_base1(prob_eff,i,"prob_eff",1) - piE)));
                current_statement_begin__ = 95;
                stan::math::assign(get_base1_lhs(prob_acc_tox,i,"prob_acc_tox",1), int_step((piT - get_base1(prob_tox,i,"prob_tox",1))));
                current_statement_begin__ = 96;
                stan::math::assign(r_to_the_p, (pow(((1 - get_base1(prob_eff,i,"prob_eff",1)) / (1 - pi1E)),p) + pow((get_base1(prob_tox,i,"prob_tox",1) / pi2T),p)));
                current_statement_begin__ = 97;
                stan::math::assign(get_base1_lhs(utility,i,"utility",1), (1 - pow(r_to_the_p,(1 / p))));
                }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < K; ++i0__) {
                if (stan::math::is_uninitialized(prob_eff[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: prob_eff" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < K; ++i0__) {
                if (stan::math::is_uninitialized(prob_tox[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: prob_tox" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < K; ++i0__) {
                if (stan::math::is_uninitialized(prob_acc_eff[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: prob_acc_eff" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < K; ++i0__) {
                if (stan::math::is_uninitialized(prob_acc_tox[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: prob_acc_tox" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < K; ++i0__) {
                if (stan::math::is_uninitialized(utility[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: utility" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 82;
            for (int k0__ = 0; k0__ < K; ++k0__) {
                check_greater_or_equal(function__,"prob_eff[k0__]",prob_eff[k0__],0);
                check_less_or_equal(function__,"prob_eff[k0__]",prob_eff[k0__],1);
            }
            current_statement_begin__ = 84;
            for (int k0__ = 0; k0__ < K; ++k0__) {
                check_greater_or_equal(function__,"prob_tox[k0__]",prob_tox[k0__],0);
                check_less_or_equal(function__,"prob_tox[k0__]",prob_tox[k0__],1);
            }
            current_statement_begin__ = 86;
            for (int k0__ = 0; k0__ < K; ++k0__) {
                check_greater_or_equal(function__,"prob_acc_eff[k0__]",prob_acc_eff[k0__],0);
                check_less_or_equal(function__,"prob_acc_eff[k0__]",prob_acc_eff[k0__],1);
            }
            current_statement_begin__ = 88;
            for (int k0__ = 0; k0__ < K; ++k0__) {
                check_greater_or_equal(function__,"prob_acc_tox[k0__]",prob_acc_tox[k0__],0);
                check_less_or_equal(function__,"prob_acc_tox[k0__]",prob_acc_tox[k0__],1);
            }
            current_statement_begin__ = 89;

            // model body

            current_statement_begin__ = 102;
            lp_accum__.add(normal_log(muE,muE_mean,muE_sd));
            current_statement_begin__ = 103;
            lp_accum__.add(normal_log(betaE1,betaE1_mean,betaE1_sd));
            current_statement_begin__ = 104;
            lp_accum__.add(normal_log(betaE2,betaE2_mean,betaE2_sd));
            current_statement_begin__ = 105;
            lp_accum__.add(normal_log(muT,muT_mean,muT_sd));
            current_statement_begin__ = 106;
            lp_accum__.add(normal_log(betaT1,betaT1_mean,betaT1_sd));
            current_statement_begin__ = 107;
            lp_accum__.add(normal_log(psi,psi_mean,psi_sd));
            current_statement_begin__ = 108;
            lp_accum__.add(log_joint_pdf(doses,doses_sq,n,yE,yT,levels,muE,betaE1,betaE2,muT,betaT1,psi, pstream__));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("muE");
        names__.push_back("betaE1");
        names__.push_back("betaE2");
        names__.push_back("muT");
        names__.push_back("betaT1");
        names__.push_back("psi");
        names__.push_back("prob_eff");
        names__.push_back("prob_tox");
        names__.push_back("prob_acc_eff");
        names__.push_back("prob_acc_tox");
        names__.push_back("utility");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_EffTox_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double muE = in__.scalar_constrain();
        double betaE1 = in__.scalar_constrain();
        double betaE2 = in__.scalar_constrain();
        double muT = in__.scalar_constrain();
        double betaT1 = in__.scalar_lb_constrain(0);
        double psi = in__.scalar_constrain();
        vars__.push_back(muE);
        vars__.push_back(betaE1);
        vars__.push_back(betaE2);
        vars__.push_back(muT);
        vars__.push_back(betaT1);
        vars__.push_back(psi);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 82;
            validate_non_negative_index("prob_eff", "K", K);
            vector<double> prob_eff(K, 0.0);
            stan::math::initialize(prob_eff, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(prob_eff,DUMMY_VAR__);
            current_statement_begin__ = 84;
            validate_non_negative_index("prob_tox", "K", K);
            vector<double> prob_tox(K, 0.0);
            stan::math::initialize(prob_tox, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(prob_tox,DUMMY_VAR__);
            current_statement_begin__ = 86;
            validate_non_negative_index("prob_acc_eff", "K", K);
            vector<double> prob_acc_eff(K, 0.0);
            stan::math::initialize(prob_acc_eff, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(prob_acc_eff,DUMMY_VAR__);
            current_statement_begin__ = 88;
            validate_non_negative_index("prob_acc_tox", "K", K);
            vector<double> prob_acc_tox(K, 0.0);
            stan::math::initialize(prob_acc_tox, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(prob_acc_tox,DUMMY_VAR__);
            current_statement_begin__ = 89;
            validate_non_negative_index("utility", "K", K);
            vector<double> utility(K, 0.0);
            stan::math::initialize(utility, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(utility,DUMMY_VAR__);


            current_statement_begin__ = 90;
            for (int i = 1; i <= K; ++i) {
                {
                current_statement_begin__ = 91;
                double r_to_the_p(0.0);
                (void) r_to_the_p;  // dummy to suppress unused var warning

                stan::math::initialize(r_to_the_p, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(r_to_the_p,DUMMY_VAR__);


                current_statement_begin__ = 92;
                stan::math::assign(get_base1_lhs(prob_eff,i,"prob_eff",1), inv_logit(((muE + (betaE1 * get_base1(doses,i,"doses",1))) + (betaE2 * get_base1(doses_sq,i,"doses_sq",1)))));
                current_statement_begin__ = 93;
                stan::math::assign(get_base1_lhs(prob_tox,i,"prob_tox",1), inv_logit((muT + (betaT1 * get_base1(doses,i,"doses",1)))));
                current_statement_begin__ = 94;
                stan::math::assign(get_base1_lhs(prob_acc_eff,i,"prob_acc_eff",1), int_step((get_base1(prob_eff,i,"prob_eff",1) - piE)));
                current_statement_begin__ = 95;
                stan::math::assign(get_base1_lhs(prob_acc_tox,i,"prob_acc_tox",1), int_step((piT - get_base1(prob_tox,i,"prob_tox",1))));
                current_statement_begin__ = 96;
                stan::math::assign(r_to_the_p, (pow(((1 - get_base1(prob_eff,i,"prob_eff",1)) / (1 - pi1E)),p) + pow((get_base1(prob_tox,i,"prob_tox",1) / pi2T),p)));
                current_statement_begin__ = 97;
                stan::math::assign(get_base1_lhs(utility,i,"utility",1), (1 - pow(r_to_the_p,(1 / p))));
                }
            }

            // validate transformed parameters
            current_statement_begin__ = 82;
            for (int k0__ = 0; k0__ < K; ++k0__) {
                check_greater_or_equal(function__,"prob_eff[k0__]",prob_eff[k0__],0);
                check_less_or_equal(function__,"prob_eff[k0__]",prob_eff[k0__],1);
            }
            current_statement_begin__ = 84;
            for (int k0__ = 0; k0__ < K; ++k0__) {
                check_greater_or_equal(function__,"prob_tox[k0__]",prob_tox[k0__],0);
                check_less_or_equal(function__,"prob_tox[k0__]",prob_tox[k0__],1);
            }
            current_statement_begin__ = 86;
            for (int k0__ = 0; k0__ < K; ++k0__) {
                check_greater_or_equal(function__,"prob_acc_eff[k0__]",prob_acc_eff[k0__],0);
                check_less_or_equal(function__,"prob_acc_eff[k0__]",prob_acc_eff[k0__],1);
            }
            current_statement_begin__ = 88;
            for (int k0__ = 0; k0__ < K; ++k0__) {
                check_greater_or_equal(function__,"prob_acc_tox[k0__]",prob_acc_tox[k0__],0);
                check_less_or_equal(function__,"prob_acc_tox[k0__]",prob_acc_tox[k0__],1);
            }
            current_statement_begin__ = 89;

            // write transformed parameters
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(prob_eff[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(prob_tox[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(prob_acc_eff[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(prob_acc_tox[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(utility[k_0__]);
            }

            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_EffTox";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "muE";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "betaE1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "betaE2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "muT";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "betaT1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prob_eff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prob_tox" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prob_acc_eff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prob_acc_tox" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "utility" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "muE";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "betaE1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "betaE2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "muT";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "betaT1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prob_eff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prob_tox" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prob_acc_eff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "prob_acc_tox" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "utility" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }

}; // model

}




#endif
